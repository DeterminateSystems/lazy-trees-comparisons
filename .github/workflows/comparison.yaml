name: Lazy trees performance comparison

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string

jobs:
  run-comparisons:
    runs-on: ${{ inputs.runner }}
    name: Evaluate the ${{ matrix.examples.package }} package on ${{ inputs.runner }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        examples:
          - { package: apacheKafka }
          - { package: chromium }
          - { package: cowsay }
          - { package: firefox }
          - { package: git }
          - { package: hello }
          - { package: jq }
          - { package: lib }
          - { package: linuxPackages }
          - { package: llvm }
          - { package: nodePackages }
          - { package: openjdk }
          - { package: opentofu }
          - { package: ponysay }
          - { package: postgresql }
          - { package: rustPackages }
          - { package: stdenv }
          - { package: swift }
    steps:
      # https://github.com/NixOS/nixpkgs/tree/2f2c8b33a3dc4bf9a3db1648d734fa8c64f9166b
      - name: Checkout Nixpkgs
        uses: actions/checkout@v4
        with:
          repository: NixOS/nixpkgs
          ref: 2f2c8b33a3dc4bf9a3db1648d734fa8c64f9166b

      - name: Install Determinate Nix
        uses: DeterminateSystems/determinate-nix-action@v3.6.1

      - name: Set up FlakeHub Cache
        uses: DeterminateSystems/flakehub-cache-action@main

      - name: Set up development environment
        run: |
          nix profile add .#hyperfine .#jq

      - name: Evaluate ${{ matrix.examples.package }} without lazy trees
        env:
          PREFIX: lazy-trees-disabled
        run: |
          hyperfine \
            --export-json ${{ env.PREFIX }}-${{ inputs.runner }}-${{ matrix.examples.package }}.json \
            --prepare 'echo "" >> flake.nix' \
            --cleanup 'sudo rm -rf ./tmp; git restore .' \
            'nix eval --quiet --offline --no-substitute --no-eval-cache --store ./tmp .#${{ matrix.examples.package }}'

      - name: Upload results (lazy trees disabled)
        uses: actions/upload-artifact@v4
        env:
          PREFIX: lazy-trees-disabled
        with:
          name: ${{ env.PREFIX }}-${{ inputs.runner }}-${{ matrix.examples.package }}
          path: ${{ env.PREFIX }}-${{ inputs.runner }}-${{ matrix.examples.package }}.json

      - name: Evaluate ${{ matrix.examples.package }} with lazy trees
        env:
          PREFIX: lazy-trees-enabled
        run: |
          echo "lazy-trees = true" | sudo tee -a /etc/nix/nix.custom.conf

          hyperfine \
            --export-json ${{ env.PREFIX }}-${{ inputs.runner }}-${{ matrix.examples.package }}.json \
            --prepare 'echo "" >> flake.nix' \
            --cleanup 'sudo rm -rf ./tmp; git restore .' \
            'nix eval --quiet --offline --no-substitute --no-eval-cache --store ./tmp .#${{ matrix.examples.package }}'

      - name: Upload results (lazy trees enabled)
        uses: actions/upload-artifact@v4
        env:
          PREFIX: lazy-trees-enabled
        with:
          name: ${{ env.PREFIX }}-${{ inputs.runner }}-${{ matrix.examples.package }}
          path: ${{ env.PREFIX }}-${{ inputs.runner }}-${{ matrix.examples.package }}.json

  collect-results:
    needs: run-comparisons
    runs-on: ubuntu-latest
    name: Display comparison results
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: results
          merge-multiple: true

      - name: Display Markdown result
        run: |
          declare -A mean_disabled mean_enabled

          for f in ./results/*.json; do
            filename=$(basename "$f")

            if [[ "$filename" =~ lazy-trees-(enabled|disabled)-([^-]+-[^-]+)-(.+)\.json ]]; then
              mode="${BASH_REMATCH[1]}"         # enabled or disabled
              runner="${BASH_REMATCH[2]}"       # e.g. ubuntu-latest
              package="${BASH_REMATCH[3]}"      # e.g. cowsay
              key="${runner}:${package}"

              mean=$(jq '.results[0].mean' "$f")

              if [[ "$mode" == "enabled" ]]; then
                mean_enabled["$key"]="$mean"
              else
                mean_disabled["$key"]="$mean"
              fi
            fi
          done

          echo "| Runner | Package | Disabled Mean (s) | Enabled Mean (s) | Δ Time (%) | Speedup |" >> "$GITHUB_STEP_SUMMARY"
          echo "|--------|---------|-------------------|------------------|------------|---------|" >> "$GITHUB_STEP_SUMMARY"

          for key in "${!mean_disabled[@]}"; do
            runner="${key%%:*}"
            package="${key##*:}"
            d="${mean_disabled[$key]}"
            e="${mean_enabled[$key]:-N/A}"
            delta="N/A"
            speedup="N/A"

            if [[ "$e" != "N/A" ]]; then
              delta=$(awk -v d="$d" -v e="$e" 'BEGIN { printf "%.1f", ((e - d) / d) * 100 }')
              speedup=$(awk -v d="$d" -v e="$e" 'BEGIN { if (e > 0) printf "%.2fx", d / e; else print "∞" }')
            fi

            printf "| %s | %s | %.2f | %.2f | %s%% | %s |\n" \
              "$runner" "$package" "$d" "$e" "$delta" "$speedup" >> "$GITHUB_STEP_SUMMARY"
          done
